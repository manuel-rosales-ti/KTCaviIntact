const {Builder, By, Key, until, WebDriver } = require('selenium-webdriver');
const _http = require('selenium-webdriver/http');
const testdata = require('./testdata.json');

(async function Users() {

    // Steps before run test:
    // Run cmd in the root folder (project) the next command: cmd chromedriver.exe command.
    // Run cmd in the root folder (project) the next command: curl -XPOST http://localhost:9515/session -d "{\"desiredCapabilities\":{\"browserName\":\"chrome\"}}" 
    
    // Open existing instance (copy and paste the sessionid obtained form curl command)
    let sessionId = '4600de09fbb9022a045c371be7dc4617';
    let url = 'http://localhost:9515/';
    let browser = 'chrome';
    let startUrl = 'http://portal-dev.tc3.telus.com/home';
    
    // Connect to existing session
    let driver = await new WebDriver(
        sessionId,
        new _http.Executor(Promise.resolve(url)
            .then(
                url => new _http.HttpClient(url, null, null))
        )
    );

    // Trying to open URL. If does not work - we need to re-create a session
    await driver.get(startUrl).catch(async r => {
        console.log('Session "' + sessionId + '" not found. Creating new session.');
        driver = await new Builder()
            .usingServer(url)
            .forBrowser(browser)
            .build();
        driver.getSession().then(function(e){
            console.log('Session: ' + JSON.stringify(e, null, 2));
        });
        driver.get(startUrl);
    });


    // Users Management options Tests
    // Test 1 Add User
    console.log('Starting Add User test')
   
    // Steps
    // Select User Management
    await driver.findElement(By.css("[href] .user")).click()
    
    // Press button Add
    await driver.findElement(By.css("button:nth-of-type(2) > span")).click()

    // Enter and select user information
    
    // Username
    await driver.findElement(By.css("input[name='name']")).sendKeys(testdata.userName)

    // email
    await driver.findElement(By.css("input[name='email']")).sendKeys(testdata.email)

    // Password
    await driver.findElement(By.css("input[name='password']")).sendKeys("Test124@")

    // ConfirmPassword
    await driver.findElement(By.css("input[name='confirm_password']")).sendKeys("Test124@")
    
    // Status
    await driver.findElement(By.css(".fields:nth-of-type(3) > .field:nth-of-type(1) .icon")).click()
    await driver.findElement(By.css(".menu.transition.visible > div:nth-of-type(1)")).click()

    // UserRole
    await driver.findElement(By.css("div:nth-of-type(2) > .field > div[role='listbox']")).click()
    await driver.findElement(By.css(".menu.transition.visible > div:nth-of-type(1)")).click()

    // Prses button Save
    await driver.findElement(By.css(".addButton.button.ui")).click()

    // Obtain Message
    await driver.sleep(3000)
    var confirmMessage = await driver.findElement(By.css(".Toastify__toast-container.Toastify__toast-container--top-right  div[role='alert']")).getText()
    //console.log(confirmMessage);
    
    // Verifications
    var expectedMessage = "Added Successfully"
    if (expectedMessage == confirmMessage) {
        console.log('Add User Test successful')
    } else {
        console.log('Add User Test fail')
    }

    // Test 2 Edit User
    console.log('Starting Edit User Test')
   
    // Steps
    // Select User
    await driver.findElement(By.css("div:nth-of-type(1) > div[role='row'] > div:nth-of-type(5) i[title='Edit']")).click()

    // Enter username
    await driver.findElement(By.css("input[name='name']")).sendKeys(" edit user test")

    // Press button update
    await driver.findElement(By.css(".addButton.button.ui > span")).click()

    // Obtain message
    await driver.sleep(3000)
    var confirmMessage = await driver.findElement(By.css(".Toastify__toast-container.Toastify__toast-container--top-right  div[role='alert']")).getText()
    
    // Verifications
    var expectedMessage = "Updated Successfully"
    if (expectedMessage == confirmMessage) {
        console.log('Update User Test successful')
    } else {
        console.log('Update User Test fail')
    }

    // // Test 3 Change Password
    // console.log('Starting Change Password Test')

    // // Steps
    // // Press button Change Password
    // await driver.findElement(By.css("button:nth-of-type(3) > span")).click()

    // // Select user
    // await driver.findElement(By.css("select[name='UserNamePassword']")).click()

    // Test 4 Delete user
    console.log('Starting Delete User Test')

    // Steps
    // Select User
    await driver.findElement(By.css("div:nth-of-type(1) > div[role='row'] > div:nth-of-type(5) i[title='Delete']")).click()
    
    // Confirm Delete
    await driver.findElement(By.css(".actions > button:nth-of-type(1) > span")).click()

    // Obtain message
    await driver.sleep(3000)
    var confirmMessage = await driver.findElement(By.css(".Toastify__toast-container.Toastify__toast-container--top-right  div[role='alert']")).getText()
        
    // Verifications
    var expectedMessage = "Deleted Successfully"
    if (expectedMessage == confirmMessage) {
        console.log('Delete User Test successful')
    } else {
        console.log('Delete User Test fail')
    }

    // // Rule Management options Tests
    // // Test 5 Add Rule
    // console.log('Starting Add Rule test')
   
    // // Steps
    // // Select Rule Management
    // await driver.findElement(By.css(".icon.university")).click()
    
    // // Press button Add
    // await driver.findElement(By.css(".ReactTableHeaderButton.button.floated.right.ui > span")).click()

    // // Enter Rule Name
    // await driver.findElement(By.css("input[name='ruleName']")).sendKeys("Testing purpose Rule")

    // // Select Rule Type
    // await driver.findElement(By.css("div:nth-of-type(1) > div:nth-of-type(2) > .field > div[role='listbox']")).sendKeys(Key.TAB)
    // //await driver.findElement(By.css(".menu.transition.visible > div:nth-of-type(1) > .text")).click()

    // // Select RVI Model
    // await driver.findElement(By.css(".fields:nth-of-type(2) > .field:nth-of-type(1) .selection")).sendKeys(Key.TAB)
    // //await driver.findElement(By.css(".menu.transition.visible > div:nth-of-type(1)")).click()

    // // Select Route Point
    // await driver.findElement(By.css("div:nth-of-type(2) > div:nth-of-type(2) > .field > div[role='listbox'] > div[role='alert']")).click()

    // //await driver.findElement(By.css(".menu.transition.visible > div:nth-of-type(2) > .text")).click()

    // // Enter Priority
    // await driver.findElement(By.css("input[name='priorityNo']")).sendKeys("1234")

    // // Select Status
    // await driver.findElement(By.css("div:nth-of-type(3) > div:nth-of-type(2) > .field > div[role='listbox']")).sendKeys(Key.TAB)
    // //await driver.findElement(By.css(".menu.transition.visible > div:nth-of-type(1)")).click()

    // // Enter Rule Content
    // await driver.findElement(By.css("textarea[label='Content']")).sendKeys("Testing purpose")

    //try {
    //    await driver.findElement(By.name('q')).sendKeys('webdriver', Key.RETURN);
    //    await driver.wait(until.titleIs('webdriver - Google Search'), 1000);
    //} finally {
        //todo: We intentionally do not close the session in order to use it next time
        // await driver.quit();
    //}

})();